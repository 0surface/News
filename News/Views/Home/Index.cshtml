@model News.Models.WebsiteListVM
@{
    ViewData["Title"] = "Home Page";
}

<div class="container">
    <h1>News Headlines</h1>
    <div class="col-md-12">
        <div class="col-md-12">
            <div>
                           
            </div>
            <h4>
                Click  On the Website 
            </h4>
            <div id="websites">
                <img id="spinner" src="~/images/loading.gif" style="display:none;" />
                @for (int i = 0; i < Model.Items.Count; i++)
                {
                    <img src="@Model.Items[i].LogoImageUrl.ToString()"
                         alt="@Model.Items[i].Name.ToString()"
                         class="img-fluid rounded float-left"
                         id="image_@i"
                         style="width:150px;height:50px"
                         onclick="getWebData('@Model.Items[i].Name.ToString()')" />
                }
            </div>
             <br/><br />
        </div>
        <hr />
        <div id="treeArea" class="treeArea col-md-12">            
        </div>
    </div>
</div>

<script>
    /*Global variables*/
    var treeData =  [
        {
            "name": "Website",
            "parent": "null",
            "children": []
        }
    ];  
    var tree;
    var diagonal;
    var svg;
    var i = 0,
        duration = 750,
        root;

    var margin = { top: 20, right: 120, bottom: 20, left: 120 },
        width = 960 - margin.right - margin.left,
        height = 500 - margin.top - margin.bottom;
    /*End of Global variables*/

    console.log("org tree data");
    console.dir(treeData); 

    $(function () {
        generateTreeDiagram(treeData);
    });

    function generateTreeDiagram(treeData) {
            // ************** Generate the tree diagram	 *****************
            var margin = { top: 20, right: 120, bottom: 20, left: 120 },
                width = 960 - margin.right - margin.left,
                height = 500 - margin.top - margin.bottom;


            tree = d3.layout.tree()
                .size([height, width]);

                diagonal = d3.svg.diagonal()
                .projection(function (d) { return [d.y, d.x]; });

                svg = d3.select(".treeArea").append("svg")
                .attr("width", width + margin.right + margin.left)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            root = treeData[0];
            root.x0 = height / 2;
            root.y0 = 0;

            update(root);

            d3.select(self.frameElement).style("height", "500px");
        }

    function getWebData(websiteName) {
            if (websiteName === '') {
                websiteName = "BBC";
            }
            var data = { name: websiteName };

            showSpinner(true);
            $.ajax({
                url: "Home/GetHeadlines",
                type: "POST",
                data: data,
                success: (data) => {
                    console.dir(data);
                    console.log("success ajax getWebData");
                    treeData = JSON.parse(data);
                    root = treeData[0];
                    root.x0 = height / 2;
                    root.y0 = 0;
                    update(root);
                    console.log(`treedata : ${treeData}`);
                    showSpinner(false);
                },
                error: (err) => {
                    showSpinner(false);
                    console.log(`Error ajax getWebData : ${err}`)
                }
            });
        }

    function showSpinner(state) {
            state ? $("#spinner").show() : $("#spinner").hide();
        }

    function update(source) {

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse(),
                links = tree.links(nodes);

            // Normalize for fixed-depth.
        nodes.forEach(function(d) {d.y = d.depth * 180; });

            // Update the nodes…
            var node = svg.selectAll("g.node")
            .data(nodes, function(d) { return d.id || (d.id = ++i); });

        // Enter any new nodes at the parent's previous position.
        var nodeEnter = node.enter().append("g")
            .attr("class", "node")
            .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
            .on("click", click);

        nodeEnter.append("circle")
            .attr("r", 1e-6)
            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

        nodeEnter.append("text")
            .attr("x", function(d) { return d.children || d._children ? -13 : 13; })
            .attr("dy", ".35em")
            .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
            .text(function(d) { return d.name; })
            .style("fill-opacity", 1e-6);

        // Transition nodes to their new position.
        var nodeUpdate = node.transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

        nodeUpdate.select("circle")
            .attr("r", 10)
            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

        nodeUpdate.select("text")
            .style("fill-opacity", 1);

        // Transition exiting nodes to the parent's new position.
        var nodeExit = node.exit().transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
            .remove();

        nodeExit.select("circle")
            .attr("r", 1e-6);

        nodeExit.select("text")
            .style("fill-opacity", 1e-6);

        // Update the links…
        var link = svg.selectAll("path.link")
            .data(links, function(d) { return d.target.id; });

        // Enter any new links at the parent's previous position.
        link.enter().insert("path", "g")
            .attr("class", "link")
            .attr("d", function(d) {
            var o = {x: source.x0, y: source.y0};
            return diagonal({source: o, target: o});
            });

        // Transition links to their new position.
        link.transition()
            .duration(duration)
            .attr("d", diagonal);

        // Transition exiting nodes to the parent's new position.
        link.exit().transition()
            .duration(duration)
            .attr("d", function(d) {
            var o = {x: source.x, y: source.y};
            return diagonal({source: o, target: o});
            })
            .remove();

        // Stash the old positions for transition.
        nodes.forEach(function(d) {
                d.x0 = d.x;
            d.y0 = d.y;
            });
    }

    /// Toggles children of d3 Tree on click.
    function click(d) {
        if (d.children) {
            d._children = d.children;
            d.children = null;
        } else {
            d.children = d._children;
            d._children = null;
        }
        update(d);
    }

</script>


